-----------------------------------------------------
-- Grammaires de MC  et MCS                       --
-----------------------------------------------------
--options
option auto = true;
option version = 0.0.1;
option k=2;
--attributes 

-- le fichier source
inh source : MCSSourceFile for PROGRAMME;
-- la machine cible pour la generation de code
inh machine : IMachine for 
         ENTITES, ENTITE, DECL, FONCTION, INST, BLOC, INSTS, SIX,
         PARFS, PARF, PARFSX, ES, ESX, 
         E, AFFX, A, AX, R, RX, T, TX, F,FX
--         -- decommenter la ligne suivante pour MCS
--       , BASE, DEFS, DEF
--         -- fin extension MCS
         ;
-- ces attributs permettent de recuperer les instructions du code ASM inline       
syn code_asm : STRING for ASM;
-- la TDS courante
inh tds_asm : TDS for ASM;
inh tds : TDS for ENTITES, DECL, ENTITE, STYPE;
syn type : DTYPE for TYPE, PARF, CHAMP, STYPE;
inh htype : DTYPE for DECL;
inh champs : LCHAMPS for CHAMPS, CHAMP ; --liste des champs
syn champ : CHAMP for CHAMP; 
inh hadr : INTEGER for BLOC, INSTS, INST , CHAMPS, CHAMP; 
--syn est_variable : BOOLEAN for DECL,ENTITE;
--syn est_fonction : BOOLEAN for DECL,ENTITE;
--inh hest_variable : BOOLEAN for ENTITE;
--inh hest_fonction : BOOLEAN for ENTITE;
--inh hlistparam : PARAMLIST for DECL, FONCTION, PARFS, PARFSX;
--syn listparam : PARAMLIST for FONCTION;
inh htxt : STRING for DECL;
inh hinfofonction : INFOFONCTION for FONCTION, PARFS, PARFSX;


--terminals
space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar virg is  ",";
sugar pt is "\.";
sugar pv is  "\;";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar asm is  "asm";
sugar int is  "int";
sugar char is  "char";
sugar struct is "struct";
sugar typedef is "typedef";
-- decommenter pour MCS
--sugar ref is "ref" ;
--sugar out is "out";
--sugar namespace is "namespace";
--sugar using is "using";
--sugar class is "class";
--sugar public is "public" ;
--sugar private is "private";
--sugar dpts is "\:";
--sugar bool is "bool";
--sugar true is "true";
--sugar false is "false";
--sugar this is "this";
--sugar new is "new" ;
--sugar null2 is "null";
--sugar base is "base" ;
-- 
sugar retour is  "return";
sugar arrow is "\-\>";
sugar null is  "NULL";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
term entier is  "[0-9]+";
term caractere is  "\'[^\']\'";
term chaine is  "\"[^\"]*\"";
term ident is  "[a-z][_0-9A-Za-z]*";
term identc is  "[A-Z][_0-9A-Za-z]*";

-- pour les instructions en assembleur TAM 'inline'
compil ASM;

--production rules
PROGRAMME -> #init ENTITES #gen;
global
   machine : IMachine;
-- transmission de la machine cible  (choisie par l'option -m au lancement) 
#init {
local
  tds : TDS;
do
   tds := new TDS();
   ENTITES^tds := tds;
   machine := PROGRAMME^source.getMachine();
   if machine = null then
     error(NO_MACH, PROGRAMME^source.getMachName());
   else
     ENTITES^machine := machine;
   end
end
}
-- ecrit le code dans un fichier
#gen {
local
do
   machine.writeCode(PROGRAMME^source.getFileName(),"; no code\n");  
end
}
ENTITES -> ;
ENTITES -> #gen ENTITE ENTITES;

#gen {
local
do
    --ENTITE^hest_variable := false;
    --ENTITE^hest_fonction := false;
    
end
}


-- definition d'un nom de type (commence par une majuscule)
ENTITE -> typedef TYPE identc #tdstype pv ;

#tdstype {
local
  i : INFOTYPE;
do
  i := new INFOTYPE(new DTYPE(identc^txt,TYPE^type.getTaille()));
  ENTITE^tds.inserer(identc^txt,i);
end
}
-- definition d'une variable globale ou d'une fonction
-- (commence par une minuscule)

ENTITE ->  TYPE ident #tdsglob DECL ;

#tdsglob {
local
  --i : INFOVAR;
  --j : INFOFONCTION;
do
  --ENTITE^est_variable := DECL^est_variable;
  --ENTITE^est_fonction := DECL^est_fonction;
  --if (DECL^est_variable) then
    --i := new INFOVAR(new DTYPE(TYPE^type.getNom(),TYPE^type.getTaille()),0);
    --ENTITE^tds.inserer(ident^txt,TYPE^type.getTaille());
  --elseif (DECL^est_fonction) then
    --j := new INFOFONCTION(new DTYPE(TYPE^type.getNom(),TYPE^type.getTaille())),DECL^listparam);
  --end
  DECL^htype := TYPE^type;
  DECL^htxt := ident^txt;
end
}
-- Variable
DECL -> pv #typeinfo;

#typeinfo {
local 
    i : INFOVAR;
do
  --DECL^est_variable := true;
  --DECL^est_fonction := false;
  
  i := new INFOVAR(new DTYPE(DECL^htype.getNom(),DECL^htype.getTaille()),0);
  DECL^tds.inserer(DECL^htxt,i);
  
end
}
DECL -> FONCTION #typeinfo ;

#typeinfo {
local
do
  --DECL^est_fonction := true;
  --DECL^est_variable := false;
end
}
-- Fonction
FONCTION ->  paro #genlistparam PARFS parf BLOC ;

#genlistparam {
local
  i : INFOFONCTION;
do

  l := new PARAMLIST();
  
  PARFS^hlistparam := l;
  --FONCTION^listparam := PARFS^hlistparam;

end
}


-- parametres de fonctions
PARFS ->  ;
PARFS ->  PARF #majliste PARFSX;

#majliste {
local
do

  PARFS^hlistparam.ajouter(PARF^type);
  

end
}

PARFSX -> ;



PARFSX ->  virg PARF #majliste PARFSX ;

#majliste {
local
do

  PARFSX^hlistparam.ajouter(PARF^type);

end
}

PARF ->  TYPE ident #typeparam;

#typeparam {
local
do

  PARF^type := TYPE^type;
  
end
}

-- les types (de base, noms, struct et pointeurs)
TYPE -> STYPE  PTRS ;
-- type de base
-- des * pour definir un pointeur
PTRS -> ;
PTRS -> mult PTRS ;
-- types de base
STYPE-> void  ;
STYPE-> int ;
STYPE-> char ;
-- nom de type (commence par une majuscule)
STYPE -> identc #type;
#type {
local
  i : INFO ;
  it : INFOTYPE ;
  t : DTYPE ;
do
  i := STYPE^tds.chercherGlobalement(identc^txt) ;
  if i = nil then
    error(B_01, identc^txt) ;
  else
    match i
    with INFOTYPE then
      it := i;
      STYPE^type := it.getType();
    else
      error(B_07,identc^txt);
    end
  end
end
}
  
-------------  
-- et struct
STYPE -> struct aco #ch CHAMPS acf #type ;
global
lc : LCHAMPS ;

#ch {
do
  lc := new LCHAMPS() ;
  CHAMPS^champs := lc ;
  CHAMPS^hadr := 0 ;
end
}

#type {
do
  STYPE^type := new STRUCT(lc) ; 
end
} 
CHAMPS -> ;
-- un nom de champ commence par une minuscule
CHAMPS -> #chh CHAMP #ch CHAMPS ;
#chh {
do
  CHAMP^hadr := CHAMPS^hadr ;
  CHAMP^champs := CHAMPS^champs; 
end
} 

#ch {
do
  call CHAMPS^champs.inserer(CHAMP^champ) ; 
  CHAMPS1^hadr := CHAMPS^hadr + CHAMP^type.getTaille();
end
}

  
CHAMP -> TYPE ident pv #ch; 
#ch {
local
c : CHAMP ;
do
  c := CHAMP^champs.chercher(ident^txt) ;
  if c /= nil then
    error(B_00, ident^txt) ;
  else 
    c := new CHAMP(ident^txt, TYPE^type, CHAMP^hadr) ;
    CHAMP^champ := c; 
    CHAMP^type := TYPE^type ;  
  end
     
end
}
-- corps de fonction et bloc d'instructions
BLOC ->  aco INSTS acf ;
-- instructions
INSTS ->   ;
INSTS ->  INST INSTS  ;
-- declaration de variable locale avec ou sans init 
INST ->  TYPE ident AFFX pv ;
-- instruction expression (affectation et appel de procedure)
INST -> E pv ;
-- bloc d'instructions
INST ->  BLOC  ;
-- conditionnelle
INST ->   si paro E parf BLOC SIX ;
SIX ->    sinon BLOC ;
SIX -> ;
-- retour de fonction
INST ->  retour  E pv ;


-- les expressions -------------
-----------------------------------------------------------------------
-- E = expression (y compris l'affectation)
-- A = expression figurant dans une affectation
-- R = expression figurant dans une expresion relationnelle
-- T = expression figurant dans une expression additive (TERME)
-- F = expression figurant dans une expression multiplicative (FACTEUR)
-----------------------------------------------------------------------
E ->   A  AFFX ;
-- affectation
AFFX -> affect  A  ;
AFFX -> ;
-- relation
A ->   R AX  ;
AX -> OPREL R;
AX ->  ;
-- operateurs relationnels
OPREL -> inf ;
OPREL -> sup ;
OPREL -> infeg ;
OPREL -> supeg ;
OPREL -> eg ;
OPREL -> neg ;
R ->  T  RX ;
-- additions ...
RX ->   OPADD  T RX  ;
RX -> ;
-- operateurs additifs
OPADD -> plus ;
OPADD -> moins ;
OPADD -> ou ;
-- multiplication, ...
T ->  F  TX  ;
TX ->   OPMUL  F TX  ;
TX ->  ;
-- operateurs multiplicatifs
OPMUL -> mult ;
OPMUL -> div ;
OPMUL -> mod ;
OPMUL -> et ;
-- expressions de base
-- Constante entiere
F -> entier   ;
-- Constante chaine
F -> chaine ;
-- Constante caractere
F -> caractere ;
-- expression unaire
F ->  OPUN  F  ;
-- operateurs unaires
OPUN -> plus ;
OPUN -> moins ;
OPUN -> non;
-- pointeur NULL
F -> null  ;
-- expression parenthesee
F ->  paro E parf FX ;
F ->  paro TYPE parf  F ;
F -> mult F ;
F -> ident FX ;
FX -> ;
-- acces champ
FX ->   pt  ident FX ;
-- acces champ pointeur
FX ->   arrow  ident FX ;
-- appel de sous-programme
FX ->   paro ES parf FX;
-- arguments appel de sous-programme
ES -> ;
ES -> E ESX  ;
ESX ->  ;
ESX -> virg E ESX ;

------------- inline asm ----------------
-- peut Ãªtre utile pour implanter des sous-programmes
-- directement en assembleur TAM.
ENTITE ->   asm #tds ASM#gen; 
#tds {
do 
  -- A faire : Remplacer 'null' par la table courante pour que
  -- le code  ASM puisse acceder aux variables de MC ou MCS
  ASM^tds_asm := null; 
end
}
#gen {
do
  -- On recupere le code assembleur 'inline' dans : ASM^code_asm ;
end
}

INST ->  asm   #tds ASM #gen ;
#tds {
do
  -- A remplacer par la table courante pour que
  -- l'assembleur puisse acceder aux variables
  ASM^tds_asm := null; 
end
}

#gen {
do
  -- ASM^code_asm contient le code assembleur inline
  -- dans lequel les noms de variables ont ete remplaces
  -- par leurs adresses.
end
}

----------------- CS extension --------------------
-- Decommenter les regles suivantes pour l'extension CS
-------------------------------------------------
--TYPE -> bool;
---- definit un contenu d'un namespace
--ENTITE -> namespace identc aco ENTITES acf ;
---- donne l acces au contenu du 'namespace'
--ENTITE -> using identc IDC pv ;
--IDC -> ;
--IDC -> pt identc IDC ;
---- definition d'une classe (peut etre en dehors d'un namespace)
--ENTITE -> ACCES class identc HERITAGE aco DEFS acf ;
---- acces 
--ACCES -> public;
--ACCES -> private;
--ACCES -> ;
---- heritage
--HERITAGE -> ;
--HERITAGE -> dpts identc IDC ;
---- membres d'une classe
--DEFS -> ;
--DEFS ->  ACCES DEF DEFS ;
--DEF  ->  TYPE ident DECL ;
---- constructeur
--DEF  ->  identc paro PARFS parf BASE BLOC;
---- appel eventuel au constructeur de la classe parente.
--BASE -> ;
--BASE -> dpts base paro ES parf  ;
---- Mode de passage pour les fonctions et mÃ©thodes : rien : D, ref : D/R, out : R
--PARF ->  MODE TYPE ident ;
--MODE -> ref ;
--MODE -> out ; 
--F -> true;
--F -> false;
--F -> this FX;
--F -> base FX;
--F -> null2;
--F -> new identc IDC paro ES parf ;
end